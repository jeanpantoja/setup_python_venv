#!/usr/bin/env bash

readonly PYTHON_VENV_PROGRAM_DEFAULT="python3.6"
readonly PYTHON_VENV_DIR_DEFAULT=".virtualenv"
readonly PYTHON_VENV_PIP_VERBOSE_DEFAULT="NO"

PYTHON_VENV_PROGRAM="${PYTHON_VENV_PROGRAM:-"$PYTHON_VENV_PROGRAM_DEFAULT"}"
PYTHON_VENV_PIP_VERBOSE="${PYTHON_VENV_PIP_VERBOSE:-"$PYTHON_VENV_PIP_VERBOSE_DEFAULT"}"
PYTHON_VENV_DIR="${PYTHON_VENV_DIR:-"$PYTHON_VENV_DIR_DEFAULT"}"

readonly PYTHON_REQUIREMENTS_DIR="$PYTHON_VENV_DIR/.setup_python_venv/requirements"
readonly PYTHON_REQUIREMENTS_MD5="$PYTHON_REQUIREMENTS_DIR/requirements.md5"
readonly PYTHON_REQUIREMENTS_LIST="$PYTHON_REQUIREMENTS_DIR/requirements.lst"

readonly SUCCESS="\033[0;32m" #green
readonly ERROR="\033[0;31m" #red
readonly KEYWORD="\033[1;37m" #white
readonly PROGRAM="\033[0;32m" #green
readonly TEXT="\033[1;34m" #light blue
readonly NOCOLOR="\033[0m"

readonly USAGE=`cat << EOF

${KEYWORD}Usage${NOCOLOR}: ${PROGRAM}${0}${NOCOLOR} requirements_file ...
    ${TEXT}
    At the first call the virtual environment will be build.
    Subsequent calls will update the environment if needed.
    The virtual environment will be created at ${PYTHON_VENV_DIR_DEFAULT} folder.
    ${NOCOLOR}
    ${KEYWORD}System environment variables:${NOCOLOR}
        ${KEYWORD}PYTHON_VENV_DIR:${NOCOLOR}${TEXT}Set to define the directory
            to build the virtual environment.${NOCOLOR}
            ${KEYWORD}Default:${NOCOLOR}${PYTHON_VENV_DIR_DEFAULT}

        ${KEYWORD}PYTHON_VENV_PROGRAM:${NOCOLOR}${TEXT}Set to define the python
            program to use on build the virtual environment.${NOCOLOR}
            ${KEYWORD}Default${NOCOLOR}=${PYTHON_VENV_PROGRAM_DEFAULT}

        ${KEYWORD}PYTHON_VENV_PIP_VERBOSE:${NOCOLOR}${TEXT}Set "YES" to define the pip
            in verbose mode or "NO" to no verbose.${NOCOLOR}
            ${KEYWORD}Default${NOCOLOR}=${PYTHON_VENV_PIP_VERBOSE}
EOF`


###############################################################################
# Answer the name that will be used to store a given requirements file name
#
# Globals:
#   PYTHON_REQUIREMENTS_DIR
#
# Arguments:
#   The origin file requirements name
#
# Returns:
#   The destiny file requirements name
###############################################################################
requirements_file_name()
{
    local requirements_file="$1"

    local fullname="$(realpath $requirements_file)"
    echo "${PYTHON_REQUIREMENTS_DIR}${fullname}"
}

###############################################################################
# Save the requirements files and its names
#
# Globals:
#   PYTHON_REQUIREMENTS_LIST
#   PYTHON_REQUIREMENTS_DIR
#
# Arguments:
#   The list of requirements files to save
#
# Returns:
#   None
###############################################################################
save_requirements()
{
    mkdir -p "$PYTHON_REQUIREMENTS_DIR"
    realpath "$@" | sort > "$PYTHON_REQUIREMENTS_LIST"

    for requirements in "$@";
    do
        local name="$(requirements_file_name $requirements)"
        mkdir -p "$(dirname $name)"
        cp "$requirements" "$name"
    done
}

###############################################################################
# Save the requirements md5 to later check changes
#
# Globals:
#   PYTHON_REQUIREMENTS_LIST
#   PYTHON_REQUIREMENTS_MD5
#
# Arguments:
#   The list of requirements files to save
#
# Returns:
#   None
###############################################################################
save_requirements_md5()
{
    save_requirements "$@"

    md5sum "$PYTHON_REQUIREMENTS_LIST" > "$PYTHON_REQUIREMENTS_MD5"

    for requirements in "$@";
    do
        local name="$(requirements_file_name $requirements)"
        md5sum "$name" >> "$PYTHON_REQUIREMENTS_MD5"
    done
}

###############################################################################
# Check if all requirements still are the same since the environment was
# configured
#
# Globals:
#   PYTHON_REQUIREMENTS_MD5
#
# Arguments:
#   The list of requirements files
#
# Returns:
#   exit status success if requirements files was not changed
###############################################################################
check_requirements_not_changed()
{
    save_requirements "$@"

    echo -e "${TEXT}Checking if python requirements was not changed${NOCOLOR}"
    local check_response="${PYTHON_REQUIREMENTS_MD5}.check"

    md5sum -c "$PYTHON_REQUIREMENTS_MD5" > "${check_response}" 2>&1
    local md5_result="$?"
    local response_color="${ERROR}"

    [ "$md5_result" == "0" ] &&
    {
        response_color="${SUCCESS}"
    }

    echo -e "${response_color}$(cat ${check_response})${NOCOLOR}"
    rm "$check_response"

    return $md5_result
}

assert_python()
{
    "$PYTHON_VENV_PROGRAM" -V > /dev/null 2>&1 ||
    {
        echo -e "${ERROR}$PYTHON_VENV_PROGRAM is required${NOCOLOR}"
        exit 1
    }
}

assert_virtualenv()
{
    virtualenv --version > /dev/null 2>&1 ||
    {
        echo -e "${ERROR}virtualenv is required${NOCOLOR}"
        exit 1
    }
}

assert_files_exists()
{
    for file in "$@";
    do
        [ ! -f "$file" ] &&
        {
            echo -e "${ERROR}File ${file} not exists${NOCOLOR}"
            exit 1
        }
    done
}
###############################################################################
# Build the python virtual environment and install the dependencies using the
# given requirements files list.
#
# Globals:
#   PYTHON_VENV_DIR
#   PYTHON_VENV_PROGRAM
#
# Arguments:
#   The list of requirements files
#
# Returns:
#   None
###############################################################################
build_python_venv()
{
    assert_python
    assert_virtualenv

    virtualenv --clear -p "$PYTHON_VENV_PROGRAM" "$PYTHON_VENV_DIR"

    local pip_quiet="--quiet"

    [ "${PYTHON_VENV_PIP_VERBOSE}" == "YES" ] &&
    {
        pip_quiet=""
    }

    for requirements in "$@";
    do
        echo -e "${TEXT}Installing ${requirements}${NOCOLOR}"
        "$PYTHON_VENV_DIR/bin/pip" install ${pip_quiet} -r "$requirements"
    done

    save_requirements_md5 "$@"
}

###############################################################################
# Setup the python virtual environment with the given requirements files list.
# If the virtual environment already was setup then it will be update in case
# that the requirements files changed in other case if the requirements files
# was not modified then nothing will be done
#
# configured
#
# Globals:
#   PYTHON_VENV_DIR
#
# Arguments:
#   The list of requirements files
#
# Returns:
#   exit status success if environment was setup
###############################################################################
setup_python_venv()
{
    [  ! -d $PYTHON_VENV_DIR ] &&
    {
        echo -e "${TEXT}Building python virtual enviroment.${NOCOLOR}"
        build_python_venv "$@"
    } ||
    {
        check_requirements_not_changed "$@" ||
        {
            echo -e "${TEXT}Re-building python virtual. Enviroment requirements changed.${NOCOLOR}"
            build_python_venv "$@"
        }
    }

    return "0"
}

main()
{
    [ "$#" -lt "1" ] &&
    {
        echo -e "$USAGE"
        exit 1
    } ||
    {
        assert_files_exists "$@"
        setup_python_venv "$@"
        echo -e "${TEXT}Done${NOCOLOR}"
    }
}

main "$@"

