#!/usr/bin/env bash

readonly PYTHON_VENV_PROGRAM_DEFAULT="python3.6"
readonly PYTHON_VENV_DIR_DEFAULT=".virtualenv"
readonly PYTHON_VENV_PIP_VERBOSE_DEFAULT="NO"

readonly SUCCESS="\033[0;32m" #green
readonly WARNING="\033[0;33m" #yellow
readonly INFO="\033[1;34m" #light blue
readonly ERROR="\033[0;31m" #red
readonly KEYWORD="\033[1;37m" #white
readonly PROGRAM="\033[0;32m" #green
readonly TEXT="\033[0;33m" #light blue
readonly NOCOLOR="\033[0m"

text()
{
    echo -e "${TEXT}${1}${NOCOLOR}"
}

keyword()
{
    echo -e "${KEYWORD}${1}${NOCOLOR}"
}

log_warning()
{
    echo -e "$(text "WARNING:") ${WARNING}${1}${NOCOLOR}"
}

log_info()
{
    echo -e "$(text "INFO:") ${INFO}${1}${NOCOLOR}"
}

log_success()
{
    echo -e "$(text "SUCCESS:")${SUCCESS}${1}${NOCOLOR}"
}

log_error()
{
    echo -e "$(text "ERROR:") ${ERROR}${1}${NOCOLOR}"
}

cleanup()
{
    rm -rf "$PYTHON_VENV_DIR"
}

###############################################################################
# Answer the name that will be used to store a given requirements file name
#
# Globals:
#   PYTHON_REQUIREMENTS_DIR
#
# Arguments:
#   The origin file requirements name
#
# Returns:
#   The destiny file requirements name
###############################################################################
requirements_file_name()
{
    local requirements_file="$1"

    local fullname="$(realpath "$requirements_file")"
    echo "${PYTHON_REQUIREMENTS_DIR}${fullname}"
}

###############################################################################
# Save the requirements files and its names
#
# Globals:
#   PYTHON_REQUIREMENTS_LIST
#   PYTHON_REQUIREMENTS_DIR
#   PYTHON_VENV_PROGRAM
#
# Arguments:
#   The list of requirements files to save
#
# Returns:
#   None
###############################################################################
save_requirements()
{
    (mkdir -p "$PYTHON_REQUIREMENTS_DIR" &&
        realpath "$@" | sort > "$PYTHON_REQUIREMENTS_LIST" &&
        echo "$PYTHON_VENV_PROGRAM" >> "$PYTHON_REQUIREMENTS_LIST") ||
    {
        log_error "Fail at save $PYTHON_REQUIREMENTS_LIST"
        exit 1
    }

    for requirements in "$@";
    do
        local name="$(requirements_file_name "$requirements")"
        (mkdir -p "$(dirname "$name")" &&
            cp "$requirements" "$name" ) ||
        {
            log_error "Fail at save ${name}"
            exit 1
        }
    done
}

###############################################################################
# Save the requirements md5 to later check changes
#
# Globals:
#   PYTHON_REQUIREMENTS_LIST
#   PYTHON_REQUIREMENTS_MD5
#
# Arguments:
#   The list of requirements files to save
#
# Returns:
#   None
###############################################################################
save_requirements_md5()
{
    save_requirements "$@"

    md5sum "$PYTHON_REQUIREMENTS_LIST" > "$PYTHON_REQUIREMENTS_MD5"

    for requirements in "$@";
    do
        local name="$(requirements_file_name "$requirements")"
        md5sum "$name" >> "$PYTHON_REQUIREMENTS_MD5"
    done
}

###############################################################################
# Check if all requirements still are the same since the environment was
# configured
#
# Globals:
#   PYTHON_REQUIREMENTS_MD5
#
# Arguments:
#   The list of requirements files
#
# Returns:
#   exit status success if requirements files was not changed
###############################################################################
check_requirements_not_changed()
{
    save_requirements "$@"

    log_info "Checking if python requirements was not changed"
    local check_response="${PYTHON_REQUIREMENTS_MD5}.check"

    md5sum -c "$PYTHON_REQUIREMENTS_MD5" > "${check_response}" 2>&1
    local md5_result="$?"
    local response="$(cat ${check_response})"
    rm "$check_response"

    [ "$md5_result" == "0" ] &&
        log_success "$response" ||
        log_error "$response"

    return $md5_result
}

assert_program()
{
    local program=$1
    local args=$2

    "$program" "$args" > /dev/null 2>&1 ||
    {
        log_error "The program[$program] is required"
        exit 1
    }
}

assert_python()
{
    assert_program "$PYTHON_VENV_PROGRAM" "-V"
}

assert_virtualenv()
{
    assert_program "virtualenv" "--version"
}

assert_md5sum()
{
    assert_program "md5sum" "--version"
}

assert_files_exists()
{
    for file in "$@";
    do
        [ ! -f "$file" ] &&
        {
            log_error "File ${file} not exists"
            exit 1
        }
    done
}
###############################################################################
# Build the python virtual environment and install the dependencies using the
# given requirements files list.
#
# Globals:
#   PYTHON_VENV_DIR
#   PYTHON_VENV_PROGRAM
#
# Arguments:
#   The list of requirements files
#
# Returns:
#   None
###############################################################################
build_python_venv()
{
    cleanup
    save_requirements_md5 "$@"

    virtualenv -p "$PYTHON_VENV_PROGRAM" "$PYTHON_VENV_DIR" > "/dev/null" 2>&1 ||
    {
        log_error "Fail at call virtualenv to create virtual environment
        at directory[${PYTHON_VENV_DIR}] to python program[${PYTHON_VENV_PROGRAM}]."
        exit 1
    }

    log_info "Creating virtual environment for python program[${PYTHON_VENV_PROGRAM}] at folder[${PYTHON_VENV_DIR}]."

    local pip_quiet="--quiet"

    [ "${PYTHON_VENV_PIP_VERBOSE}" == "YES" ] &&
    {
        pip_quiet=""
    }

    for requirements in "$@";
    do
        log_info "Installing ${requirements}"
        "$PYTHON_VENV_DIR/bin/pip" install ${pip_quiet} -r "$requirements"
    done

}

###############################################################################
# Setup the python virtual environment with the given requirements files list.
# If the virtual environment already was setup then it will be update in case
# that the requirements files changed in other case if the requirements files
# was not modified then nothing will be done
#
# configured
#
# Globals:
#   PYTHON_VENV_DIR
#
# Arguments:
#   The list of requirements files
#
# Returns:
#   exit status success if environment was setup
###############################################################################
setup_python_venv()
{
    assert_python
    assert_virtualenv
    assert_md5sum
    assert_files_exists "$@"

    [  ! -d $PYTHON_VENV_DIR ] &&
    {
        log_info "Building python virtual enviroment."
        build_python_venv "$@" || exit 1
    } ||
    {
        check_requirements_not_changed "$@" && log_info "No updates to be executed" ||
        {
            log_info "Re-building python virtual. Enviroment requirements changed."
            build_python_venv "$@" || exit 1
        }
    }

    return "0"
}

usage()
{
    readonly usage_content=`cat << EOF
$(text "

Setup Python Virtual Environment(1)                                      setup_python_venv                                     Setup Python Virtual Environment(1)

NAME
       setup_python_venv- Setup Python Virtual Environment

SYNOPSIS
       setup_python_venv [options] ...  [requirements_file] ...

DESCRIPTION
           At the first call the virtual environment will be build. At subsequent calls to this program after
           the environment build, if the requirements was not changed then not will be done but if changed so the
           program will execute an update at the virtual environment.

           The virtual environment will be created at directory defined in PYTHON_VENV_DIR system environment variable
           that also can be defined using the -d option. If requirements files are omitted the program will find for
           requirements.txt file in the current directory.

OPTIONS
       -d     The directory to build the virtual environment; also PYTHON_VENV_DIR. Default = .virtualenv

       -p     The python program to use on build the virtual environment; also PYTHON_VENV_PROGRAM. Default = .python3.6

       -v     Enable verbose mode. No argument is required. Default = Disabled

       -h     Prints the usage help

EXAMPLES
           Create a python virtual environment at folder pyenv in the current directory.  The python used at this environment will be python3 and the dependencies
       will be read from requirements.txt file:

           setup_python_venv -d pyenv -p python3 requirements.txt

           Create a python virtual environment at folder .virtualenv in the current directory.  The python used at this environment  will  be  python3.6  and  the
       dependencies will be read from requirements.txt and dev_requirements files:

           setup_python_venv requirements.txt dev_requirements.txt

           Create a python virtual environment at folder .virtualenv in the current directory.  The python used at this environment will be python3.6 and the pro‐
       gram will check for a requirements.txt file at current directory:

           setup_python_venv

LICENSE
       https://github.com/jeanpantoja/setup_python_venv/blob/master/LICENSE

BUGS
       Bugs are tracked in GitHub Issues: https://github.com/jeanpantoja/setup_python_venv/issues

RESOURCES AND DOCUMENTATION
       GitHub repository & Issue Tracker: https://github.com/jeanpantoja/setup_python_venv

AUTHORS
       Jean Carlos Sales Pantoja - je.cs@pantoja@gmail.com

setup_python_venv                                                              2018                                            Setup Python Virtual Environment(1)

")
EOF`
    echo -e "$usage_content"
    exit 0
}

main()
{
    while getopts ":p:d:vh" opt;
    do
        case "$opt" in
            "p")
                PYTHON_VENV_PROGRAM="${OPTARG}"
                ;;
            "d")
                PYTHON_VENV_DIR="${OPTARG}"
                ;;
            "v")
                PYTHON_VENV_PIP_VERBOSE="YES"
                ;;
            "h")
                usage
                ;;
            "?")
                log_warning "Invalid option: -${OPTARG}."
                ;;
            ":")
                log_error "An argument to option[-${OPTARG}] is required. Aborting execution."
                exit 1
                ;;
        esac
    done

    PYTHON_VENV_PROGRAM="${PYTHON_VENV_PROGRAM:-"$PYTHON_VENV_PROGRAM_DEFAULT"}"
    PYTHON_VENV_PIP_VERBOSE="${PYTHON_VENV_PIP_VERBOSE:-"$PYTHON_VENV_PIP_VERBOSE_DEFAULT"}"
    PYTHON_VENV_DIR="${PYTHON_VENV_DIR:-"$PYTHON_VENV_DIR_DEFAULT"}"

    readonly SETUP_PYTHON_ENV_DIR="$PYTHON_VENV_DIR/.setup_python_venv"
    readonly PYTHON_REQUIREMENTS_DIR="$SETUP_PYTHON_ENV_DIR/requirements"
    readonly PYTHON_REQUIREMENTS_MD5="$PYTHON_REQUIREMENTS_DIR/requirements.md5"
    readonly PYTHON_REQUIREMENTS_LIST="$PYTHON_REQUIREMENTS_DIR/requirements.lst"

    local args=("$@")
    local first_positional_arg=$(( ${OPTIND} - 1))
    local positional_args=("${args[@]:$first_positional_arg}")

    local number_of_positional_args="${#positional_args[@]}"

    [ "$number_of_positional_args" -eq "0" ] &&
    {
        positional_args=("requirements.txt")
    }

    setup_python_venv "${positional_args[@]}"
    log_info "Done"
}

main "$@"
